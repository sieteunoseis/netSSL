name: Build and Push Docker Image

on:
  push:
    branches: [ main, master, security-stability-improvements ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/sieteunoseis/netssl
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-docker:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test Docker deployment
      run: |
        # Create minimal .env file for testing
        cat > .env << EOF
        VITE_BRANDING_URL=https://automate.builders
        VITE_BRANDING_NAME=Automate Builders
        VITE_TABLE_COLUMNS=name,hostname,username,password,version
        PORT=5000
        NODE_ENV=production
        EOF
        
        # Start the unified container
        docker compose up -d
        
        # Wait for services to start
        sleep 45
        
        # Test frontend (nginx on port 3000)
        curl -f "http://localhost:3000/" || exit 1
        
        # Test backend API through nginx proxy
        curl -f "http://localhost:3000/api/data" || exit 1
        
        # Cleanup
        docker compose down